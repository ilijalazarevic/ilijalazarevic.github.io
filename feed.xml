<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://ilijalazarevic.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ilijalazarevic.com/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2023-09-06T10:19:29+02:00</updated><id>https://ilijalazarevic.com/feed.xml</id><title type="html">Ilija Lazarevic</title><subtitle>My personal blog where I share my posts about artificial intelligence, machine learning and data science, programming, and various thoughts.</subtitle><author><name>Ilija Lazarevic</name></author><entry><title type="html">Managing Python Versions and Virtual Environments</title><link href="https://ilijalazarevic.com/post-python-virtual-environments/" rel="alternate" type="text/html" title="Managing Python Versions and Virtual Environments" /><published>2023-07-13T14:21:28+02:00</published><updated>2023-07-13T14:21:28+02:00</updated><id>https://ilijalazarevic.com/post-python-virtual-environments</id><content type="html" xml:base="https://ilijalazarevic.com/post-python-virtual-environments/"><![CDATA[<p>The idea for this blog post is about how Python can be used in different environments. These are so-called “virtual environments” in Python, and there have been many tools that provide this capability with more or less additional functionalities.</p>

<p>Some of you may remember <code class="language-plaintext highlighter-rouge">venv</code> and the <code class="language-plaintext highlighter-rouge">virtualenv</code> as one of the first tools that enabled developers to create specific virtual environments and not pollute the system. However, a lot was left to be desired. So then there were <code class="language-plaintext highlighter-rouge">virtualenvwrapper</code> and <code class="language-plaintext highlighter-rouge">pipenv</code>. These tried to address the lack of usability in some use cases. However, the main points that all of these tools want to address are:</p>

<ol>
  <li>deal with multiple Python interpreter versions,</li>
  <li>where to install a virtual environment, or have some consistent way of doing it,</li>
  <li>how to logically connect the virtual environment with your project if it was installed somewhere else and not in the project directory,</li>
  <li>activate the virtual environment when you are about to work on the project, and then deactivate it,</li>
  <li>keep the lists of installed packages that were used for project development and for using the project as a library in another project,</li>
  <li>how to pack your project and publish it in a consistent way.</li>
</ol>

<p>There is a slight chance I forgot some pain points that developers had to solve. Nevertheless, you can see that there are already enough concerns to deal with once you start working on your Python projects.</p>

<p>Those of you who know what I’m talking about will shout (silently) “Hey, you forgot <code class="language-plaintext highlighter-rouge">pyenv</code> and <code class="language-plaintext highlighter-rouge">poetry</code>!” And you would be wrong, since these two were exactly the reasons why I wanted to write this blog post. And yes, you can use just one of these. However, I like to use them both as complementary tools to achieve all of the previously addressed points in the list above.</p>

<h2 id="pyenv">Pyenv</h2>

<p>This tool is really handy if you want to have more than one Python interpreter version available on your system. I will not go over the installation and basic usage tutorials here. My idea is to give you a general overview of how <code class="language-plaintext highlighter-rouge">pyenv</code> works.</p>

<p>On a vanilla system, you will probably have just one Python interpreter version installed. This will be enough for simple fiddling with Python or even working on your project, as long as the project’s Python version is exactly the same as the one on your system. Of course, you would have to install packages on a system level and pray that you wouldn’t work on two different projects with different sets of packages (and versions) at the same time.</p>

<p>Once you start being more serious with your development and research, you will find yourself using different Python interpreter versions with different sets of packages and their versions on each project. Using system-installed Python will probably get messy, and there is a high chance you will end up “devopsing” your time instead of focusing on Python’s Zen.</p>

<p>Here, <code class="language-plaintext highlighter-rouge">pyenv</code> comes to the rescue. It gives you a way to install as many Python interpreter versions as you want. And not just CPython ones, but others like PyPy, Pyston, and Stackless. You can really enjoy your options. And even though this part is really handy and superb, the next thing is even better. You can change the interpreter versions used on three different levels: global, local, and shell.</p>

<p>The global level is just the default interpreter version on your system. This way, whenever and wherever you type <code class="language-plaintext highlighter-rouge">python</code> in shell or run your project with <code class="language-plaintext highlighter-rouge">python main.py</code> you will use this specific version of the interpreter. You set this by executing <code class="language-plaintext highlighter-rouge">pyenv global &lt;version&gt;</code> in your shell.</p>

<p>Local level is even better because you set the interpreter version for the specific directory. This should be the project’s directory, so once you change your path to this project’s directory, the interpreter version used should be updated. The same interpreter version is set for all subdirectories. You can set this by executing <code class="language-plaintext highlighter-rouge">pyenv local &lt;version&gt;</code> in the shell, and you end up with <code class="language-plaintext highlighter-rouge">.python-version</code> file in the current directory, that specifies desired version.</p>

<p>Shell level is even more granular and sets the interpreter version just for the current shell that you are in. This is the least persistent setup because once you exit the shell and open it again, you end up with the interpreter version set up locally (if it is) or globally (which is set by default).</p>

<p>This makes your life a lot easier.</p>

<p>One more thing that is really handy is that you can manage virtual environments with <code class="language-plaintext highlighter-rouge">pyenv</code>. By having multiple interpreter versions and implementations, you are able to instantiate many virtual environments. These are installed at the specific system location set up by default. You can just write each down on a piece of paper and remember which project it belongs to, or you can just run <code class="language-plaintext highlighter-rouge">pyenv local &lt;virtual env name&gt;</code> in the project directory. This way, you get the automatic virtual environment activation once you position yourself in the project directory in shell.</p>

<p>In essence, <code class="language-plaintext highlighter-rouge">pyenv</code> solves 1.-4. points from the list given above. You could deal with the other two points for sure, but you would have to use additional tools. I see that <code class="language-plaintext highlighter-rouge">pyenv</code> was not created with that goal. And here we can slide into our next part.</p>

<h2 id="poetry">Poetry</h2>

<p>While <code class="language-plaintext highlighter-rouge">pyenv</code> gives the ability to manage different Python interpreter versions and many different virtual environments, <code class="language-plaintext highlighter-rouge">poetry</code> is good for managing package versions for each project (and virtual environment). <code class="language-plaintext highlighter-rouge">poetry</code> has its own way of managing virtual environments, which, in my opinion, should not be mixed with <code class="language-plaintext highlighter-rouge">pyenv</code> way.</p>

<p>Obviously, I will not be able to squeeze all of the information on how to use <code class="language-plaintext highlighter-rouge">poetry</code> here, but in general, it uses meta files that describe your project and specify versions of packages used. Or, to make it more eloquent, it is a tool to deal with dependency management in your project. Those who are seasoned developers can find this extremely important because of so-called <em>dependency hell</em>, while the newcomers will learn the importance of this very soon, if not already.</p>

<p>And while the user manual goes into depth describing how <code class="language-plaintext highlighter-rouge">poetry</code> can and should be used, it is interesting how it can be composed with <code class="language-plaintext highlighter-rouge">pyenv</code>. More precisely, my advice would be to use <code class="language-plaintext highlighter-rouge">pyenv</code> to make different Python interpreter versions available, and then use <code class="language-plaintext highlighter-rouge">poetry</code> to install a virtual environment for your project. Creating projects in <code class="language-plaintext highlighter-rouge">poetry</code> is as easy as running <code class="language-plaintext highlighter-rouge">poetry new &lt;project name&gt;</code>. From there you are able to install packages, update their versions, enter a virtual environment for easier interaction with the code, and so on.</p>

<p>Additionally, <code class="language-plaintext highlighter-rouge">poetry</code> gives you a way of structuring your project so you can publish it as a package/library. This way, it can be publicly available on PyPi or in private repositories.</p>

<p>Essentially, <code class="language-plaintext highlighter-rouge">poetry</code> solves the main points 2.-.6. So it’s almost all of them. This is why I think it is a good choice to use it with <code class="language-plaintext highlighter-rouge">pyenv</code> to achieve a smooth development process.</p>

<p>In the end, I want to make it clear that it is really up to you which set of tools you are going to use for your project, but you have to be aware of the scaling development process and make it smooth not just for you but for the whole team. You even have to make sure your project, which is going to be an integral part of some other project, is well structured with a logical package structure and good versioning. What could make your life easier as a contributor to a library could make library users lives harder. Have that in mind.</p>

<p>Anyway, have a nice day and share this blog post if you liked it!</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://realpython.com/intro-to-pyenv/#virtual-environments-and-pyenv">Managing Multiple Python Versions With pyenv</a></li>
  <li><a href="https://python-poetry.org/docs/">Python packaging and dependency management made easy</a></li>
</ul>]]></content><author><name>Ilija Lazarevic</name></author><category term="python" /><category term="software" /><category term="development" /><summary type="html"><![CDATA[The best complementary tools for managing virtual environments in Python development process]]></summary></entry><entry><title type="html">Is Python pass by value or pass by reference?</title><link href="https://ilijalazarevic.com/post-python-variable-passing/" rel="alternate" type="text/html" title="Is Python pass by value or pass by reference?" /><published>2023-07-10T14:21:28+02:00</published><updated>2023-07-10T14:21:28+02:00</updated><id>https://ilijalazarevic.com/post-python-variable-passing</id><content type="html" xml:base="https://ilijalazarevic.com/post-python-variable-passing/"><![CDATA[<p>This question is ubiquitous in all programming languages. Once you start using your programming language of choice for more than just simple programs and purposes, you will have to deal with more intermediate and advanced concepts. One of these is how function arguments are passed: by value or by reference?</p>

<p>Why is this something that is not that simple or easy to grasp? Well, you have to make sure you know what is happening with memory management once your program is running. Also, this certainly requires knowing the intricacies of language syntax and semantics. And if you have experience using lower-level languages like C or C++, you will know that similar questions bring a whole new level of advanced concepts like pointers, references, differences between them, and best practices for using them. It is not for the faint-hearted, I can tell you that.</p>

<p>Let’s start gently.</p>

<p>As a beginner, you may decide to define specific function for getting the circle circumference knowing the radius. And you may define it like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">circumference</span><span class="p">(</span><span class="n">radius</span><span class="p">):</span>
    <span class="c1"># let's keep it simple and use this value for PI
</span>    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span>  <span class="n">radius</span> <span class="o">*</span> <span class="mf">3.14</span>

</code></pre></div></div>

<p>Calling this function by passing the value for <code class="language-plaintext highlighter-rouge">radius</code> is easy and intuitive. You pass the value, and you get the result. What else is there to it?</p>

<p>Now, let’s say you want to count how many times you have called the function, by introducing the new variable <code class="language-plaintext highlighter-rouge">count</code> and passing it as the second argument of our function.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">circumference</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">radius</span> <span class="o">*</span> <span class="mf">3.14</span>
</code></pre></div></div>

<p>What would be the result of the function call?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n_calls</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">print</span><span class="p">(</span><span class="n">circumference</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_calls</span><span class="p">))</span>
<span class="c1"># 6.28
</span><span class="k">print</span><span class="p">(</span><span class="n">n_calls</span><span class="p">)</span>
<span class="c1"># 0
</span></code></pre></div></div>

<p>The circumference is correct, but what happened with <code class="language-plaintext highlighter-rouge">n_calls</code>? Why is it still 0, and not 1? Here the “pass by value or pass by reference?” question arises.</p>

<p>You probably already know that Python has one interesting function called <code class="language-plaintext highlighter-rouge">id</code> that returns the memory location of a variable. For example, we can redefine our function and print the memory location of the <code class="language-plaintext highlighter-rouge">count</code> variable:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">circumference</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Old count memory location:'</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">count</span><span class="p">))</span>
    <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'New count memory location:'</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">count</span><span class="p">))</span>
    <span class="k">return</span> <span class="mi">2</span><span class="o">*</span> <span class="n">radius</span> <span class="o">*</span> <span class="mf">3.14</span>
</code></pre></div></div>

<p>Now, we can print the memory location of our variable <code class="language-plaintext highlighter-rouge">n_calls</code> before we pass it to the function call, and the function will print the memory location of the <code class="language-plaintext highlighter-rouge">count</code> variable inside of it.</p>

<p>Before you try out this one, let’s make a thought experiment while introducing the concepts of <em>pass by value</em> and <em>pass by reference</em>.</p>

<p><strong>Pass by value</strong> means that each variable value that is passed as an argument in a function call is copied somewhere in computer memory, and that function argument name becomes the variable name that is assigned to it. This means that changing the value of this variable (<code class="language-plaintext highlighter-rouge">count</code> in our case) inside the function (value stored in a new memory location), doesn’t affect the value of the original variable (<code class="language-plaintext highlighter-rouge">n_calls</code>) value. How can we check if a new memory location is used for copying the variable value? <code class="language-plaintext highlighter-rouge">id</code> is our rescue.</p>

<p><strong>Pass by reference</strong> means that changing the value of a variable by using the name defined in the function declaration (<code class="language-plaintext highlighter-rouge">count</code>) affects the value of the original variable (<code class="language-plaintext highlighter-rouge">n_calls</code>). How can we check for this? Well, we already did with trying to modify <code class="language-plaintext highlighter-rouge">n_calls</code> by changing <code class="language-plaintext highlighter-rouge">count</code> inside our function. From the example, you can clearly see that Python doesn’t pass function argument variables by reference.</p>

<p>What is left for us is to try to make a proof that Python passes function argument variables by value, and we are done.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n_calls</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">n_calls</span><span class="p">))</span>
<span class="c1"># 140472497733840
</span><span class="k">print</span><span class="p">(</span><span class="n">circumference</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_calls</span><span class="p">))</span>
<span class="c1"># Old count memory location: 140472497733840
# New count memory location: 140472497733872
# 6.28
</span><span class="k">print</span><span class="p">(</span><span class="n">n_calls</span><span class="p">)</span>
<span class="c1"># 0
</span></code></pre></div></div>

<p>Alright, this is interesting. Apparently, it looks like the memory location of <code class="language-plaintext highlighter-rouge">count</code> is the same as the memory location of <code class="language-plaintext highlighter-rouge">n_calls</code>. This totally overrules our conclusion that Python passes by value because, in that case, memory locations would be different. Yet, when we change <code class="language-plaintext highlighter-rouge">count</code> in the function, it doesn’t update <code class="language-plaintext highlighter-rouge">n_calls</code> in the caller (outer scope). So it’s not passing a Python reference either. What kind of black magic are we witnessing here?</p>

<p>This is called <strong>passing by assignment</strong>. Yes, it does seem a bit odd because it sidetracks our initial question. And that question is perfectly valid for any programming language, at least the most widely used ones. So, what this mouthful of a statement means is that Python is passing by reference. Yet, when you use the same variable name in function local scope, this new name (reference) hides the one from the function argument. To go further, it hides the same variable name from any of the enclosing lexical scopes that exist in Python. So, the same variable name now references another object in memory.</p>

<p>How does this affects your options as a developer?</p>

<p>Well, if you want to achieve the effects of passing by reference, do not reassign the variable name to newly instantiated objects inside the function. What you can use is a mutable data structure, like a <code class="language-plaintext highlighter-rouge">list</code>, <code class="language-plaintext highlighter-rouge">dict</code>, or custom-defined object, and update their state while keeping the reference intact. Example:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">circumference</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Old count memory location:'</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">count</span><span class="p">))</span>
    <span class="n">count</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'New count memory location:'</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">count</span><span class="p">))</span>
    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">radius</span> <span class="o">*</span> <span class="mf">3.14</span>

<span class="n">n_calls</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">n_calls</span><span class="p">))</span>
<span class="c1"># 140472420555968
</span><span class="k">print</span><span class="p">(</span><span class="n">circumference</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_calls</span><span class="p">))</span>
<span class="c1"># Old count memory location: 140472430829632
# New count memory location: 140472430829632
# 6.28
</span><span class="k">print</span><span class="p">(</span><span class="n">n_calls</span><span class="p">)</span>
<span class="c1"># [1]
</span></code></pre></div></div>

<p>This way, you keep the reference (name) to the object that was created by the caller and just update the object’s state. Pretty much the same can be achieved with a dictionary or custom object.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">circumference</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Old count memory location:'</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">count</span><span class="p">))</span>
    <span class="n">count</span><span class="p">[</span><span class="s">'calls'</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'New count memory location:'</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">count</span><span class="p">))</span>
    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">radius</span> <span class="o">*</span> <span class="mf">3.14</span>

<span class="n">n_calls</span> <span class="o">=</span> <span class="p">{</span><span class="s">'calls'</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
<span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">n_calls</span><span class="p">))</span>
<span class="c1"># 140472206558080
</span><span class="k">print</span><span class="p">(</span><span class="n">circumference</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_calls</span><span class="p">))</span>
<span class="c1"># Old count memory location: 140472206558080
# New count memory location: 140472206558080
# 6.28
</span><span class="k">print</span><span class="p">(</span><span class="n">n_calls</span><span class="p">)</span>
<span class="c1"># {'calls': 1}
</span></code></pre></div></div>

<p>I’ll leave you to do the experiment with custom objects.</p>

<p>Why was this so important? Well, I think that some concepts can be tricky to fully grasp, and not knowing them will eventually come back to bite you. In the best-case scenario, you will get the error at runtime, and you will know that something has to be fixed. The worst-case scenario is when everything runs smoothly but the error affects the business logic. These are <em>unknown unknowns</em>.</p>

<p>Check this out:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">var</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">var</span><span class="p">))</span>
    <span class="n">var</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">var</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">var</span>

<span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span>

<span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
<span class="c1"># (140472497734000, 140472497734032)
</span>
<span class="n">test</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="c1"># 140472497734000
# 140472497734032
# 6
</span></code></pre></div></div>

<p>What is happening here? I’ll probably write about this in some of my next blog posts.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">Stackoverflow - How do I pass a variable by reference?</a></li>
  <li><a href="https://realpython.com/python-pass-by-reference/">Pass by Reference in Python: Background and Best Practices</a></li>
</ul>]]></content><author><name>Ilija Lazarevic</name></author><category term="python" /><category term="software" /><category term="development" /><summary type="html"><![CDATA[Is Python pass by value or pass by reference?]]></summary></entry><entry><title type="html">Wholesome blog about daily digests</title><link href="https://ilijalazarevic.com/post-first-rant/" rel="alternate" type="text/html" title="Wholesome blog about daily digests" /><published>2023-07-07T07:14:21+02:00</published><updated>2023-07-07T07:14:21+02:00</updated><id>https://ilijalazarevic.com/post-first-rant</id><content type="html" xml:base="https://ilijalazarevic.com/post-first-rant/"><![CDATA[<p>As stated in the description of this blog post, I want to start sharing my work, snippets, adventures, and thoughts with you, yes you!</p>

<p>Well, I had an idea about putting up the poster of Uncle Sam, but.. heck, that would be too much. Let’s keep it quiet…er.</p>]]></content><author><name>Ilija Lazarevic</name></author><category term="me" /><summary type="html"><![CDATA[This is my first blog in a series about everything I do and part of what I think.]]></summary></entry></feed>